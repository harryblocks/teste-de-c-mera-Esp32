import cv2
import numpy as np

def rgb_to_hsv(r, g, b):
    color = np.uint8([[[r, g, b]]])
    hsv_color = cv2.cvtColor(color, cv2.COLOR_RGB2HSV)
    return hsv_color[0][0]

colors_hsv = {
    "C1: Cinza": (rgb_to_hsv(128, 128, 128), rgb_to_hsv(160, 160, 160)),
    "C2: Rosa Claro": (rgb_to_hsv(255, 182, 193), rgb_to_hsv(255, 192, 203)),
    "C3: Bege": (rgb_to_hsv(245, 245, 220), rgb_to_hsv(255, 255, 240)),
    "C4: Laranja": (rgb_to_hsv(255, 165, 0), rgb_to_hsv(255, 140, 0)),
    "C5: Laranja Escuro": (rgb_to_hsv(255, 140, 0), rgb_to_hsv(255, 69, 0)),
    "C6: Marrom": (rgb_to_hsv(139, 69, 19), rgb_to_hsv(160, 82, 45)),
    "D1: Cinza": (rgb_to_hsv(119, 136, 153), rgb_to_hsv(128, 128, 128)),
    "D2: Bege Claro": (rgb_to_hsv(255, 228, 196), rgb_to_hsv(255, 240, 220)),
    "D3: Bege Escuro": (rgb_to_hsv(210, 180, 140), rgb_to_hsv(222, 184, 135)),
    "D4: Marrom Claro": (rgb_to_hsv(210, 105, 30), rgb_to_hsv(205, 133, 63)),
    "D5: Marrom Médio": (rgb_to_hsv(139, 69, 19), rgb_to_hsv(160, 82, 45)),
    "D6: Marrom Escuro": (rgb_to_hsv(92, 64, 51), rgb_to_hsv(112, 66, 20)),
    "E1: Cinza": (rgb_to_hsv(112, 128, 144), rgb_to_hsv(119, 136, 153)),
    "E2: Amarelo Clarinho": (rgb_to_hsv(255, 255, 224), rgb_to_hsv(255, 250, 205)),
    "E3: Amarelo Claro": (rgb_to_hsv(255, 255, 0), rgb_to_hsv(255, 255, 102)),
    "E4: Amarelo": (rgb_to_hsv(255, 255, 0), rgb_to_hsv(255, 255, 85)),
    "E5: Mostarda": (rgb_to_hsv(255, 219, 88), rgb_to_hsv(218, 165, 32)),
    "E6: Amarelo Escuro": (rgb_to_hsv(204, 204, 0), rgb_to_hsv(238, 232, 170)),
    "B1: Branco": (rgb_to_hsv(255, 255, 255), rgb_to_hsv(255, 255, 255)),
    "B2: Branco Amarelado": (rgb_to_hsv(255, 255, 240), rgb_to_hsv(255, 255, 224)),
    "B3: Verde Clarinho": (rgb_to_hsv(152, 251, 152), rgb_to_hsv(144, 238, 144)),
    "B4: Verde Claro": (rgb_to_hsv(144, 238, 144), rgb_to_hsv(127, 255, 0)),
    "B5: Verde Musgo": (rgb_to_hsv(107, 142, 35), rgb_to_hsv(85, 107, 47)),
    "B6: Verde Escuro": (rgb_to_hsv(0, 100, 0), rgb_to_hsv(0, 128, 0)),
}

ip = "192.168.137.166"
camera_url = f"http://{ip}:81/stream"
cap = cv2.VideoCapture(camera_url)

if not cap.isOpened():
    print("Erro ao abrir o vídeo. Verifique o caminho do arquivo.")
    exit()

screen_width = 1366 // 2
screen_height = 768 // 2

def detect_color(hsv_value):
    for label, (lower_hsv, upper_hsv) in colors_hsv.items():
        if np.all(lower_hsv <= hsv_value) and np.all(hsv_value <= upper_hsv):
            return label
    return None

camera_orientation = 1

while True:
    ret, frame = cap.read()
    if not ret:
        print("Fim do vídeo ou falha ao capturar o vídeo")
        break

    if camera_orientation == 1:
        frame = cv2.rotate(frame, cv2.ROTATE_180)

    frame = cv2.resize(frame, (screen_width, screen_height), interpolation=cv2.INTER_AREA)
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    gray = cv2.GaussianBlur(gray, (5, 5), 0)  # Suavização para reduzir ruído
    _, thresh = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY)

    contours, _ = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

    for contour in contours:
        area = cv2.contourArea(contour)
        if area > 500:
            x, y, w, h = cv2.boundingRect(contour)
            mask_roi = hsv[y:y + h, x:x + w]

            detected_colors = [detect_color(pixel) for pixel in mask_roi.reshape(-1, 3)]
            detected_colors = list(filter(None, detected_colors))  # Remove None

            if detected_colors:
                cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 255, 255), 2)
                cv2.putText(frame, detected_colors[0], (x + 5, y - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)

    cv2.imshow("Identificador de coral", frame)

    if cv2.waitKey(1) & 0xFF == 27:
        break

cap.release()
cv2.destroyAllWindows()
